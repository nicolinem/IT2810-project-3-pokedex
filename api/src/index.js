const { typeDefs, resolvers } = require("./graphql-schema");
const { ApolloServer } = require("apollo-server-express");
const express = require("express");
import neo4j from "neo4j-driver";
import { Neo4jGraphQL } from "@neo4j/graphql";
import dotenv from "dotenv";
const auth = require("./auth");
const cors = require("cors");
const path = require("path");

// set environment variables from .env
dotenv.config();

const app = express();

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || "bolt://localhost:7687",
  neo4j.auth.basic(
    process.env.NEO4J_USER || "neo4j",
    process.env.NEO4J_PASSWORD || "neo4j"
  )
);

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Read more in the docs:
 * https://neo4j.com/docs/graphql-manual/current/
 */

const neoSchema = new Neo4jGraphQL({ typeDefs, resolvers });

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */

const server = new ApolloServer({
  context: ({ req }) => (
    console.log("ID", req.user.id),
    {
      driverConfig: { database: "neo4j" },
      driver,
      cypherParams: {
        uid: req.user.id,
      },
    }
  ),
  introspection: true,
  playground: true,
  schema: neoSchema.schema,
});

const port = process.env.GRAPHQL_LISTEN_PORT || 4001;

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */

app.use(cors());

app.use(express.static(path.join(__dirname, "public")));

app.use(auth);

server.applyMiddleware({ app });

app.listen({ port, path }, () => {
  console.log(`GraphQL server ready at http://localhost:${port}/graphql`);
});
